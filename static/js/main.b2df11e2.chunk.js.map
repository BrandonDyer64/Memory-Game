{"version":3,"sources":["logo.svg","Game/Card.js","Utils.js","Game/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Card","this","refs","flipContainer","classList","toggle","remove","add","contains","_this","react_default","a","createElement","style","margin","className","ref","onClick","event","textAlign","fontSize","props","value","Component","range","start","end","array","Array","i","push","Game","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","cards","cardNumbers","concat","toConsumableArray","length","j","Math","floor","random","_ref","shuffleArray","Card_Card","String","fromCharCode","state","App","Game_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0IAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,gOCEnBC,mLAEjBC,KAAKC,KAAKC,cAAcC,UAAUC,OAAO,6CAGzCJ,KAAKC,KAAKC,cAAcC,UAAUE,OAAO,4CAGzCL,KAAKC,KAAKC,cAAcC,UAAUG,IAAI,8CAGtC,OAAON,KAAKC,KAAKC,cAAcC,UAAUI,SAAS,8CAE3C,IAAAC,EAAAR,KACP,OACES,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAEC,OAAQ,SACpBJ,EAAAC,EAAAC,cAAA,OACEG,UAAU,iBACVC,IAAI,gBACJC,QAAS,SAAAC,GAAK,OAAIT,EAAKJ,WAEvBK,EAAAC,EAAAC,cAAA,OAAKG,UAAU,WACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,cACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,QACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,gBAInBL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,aACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,QACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,cACbL,EAAAC,EAAAC,cAAA,QAAMG,UAAU,OAAOF,MAAO,CAAEM,UAAW,SAA3C,UAGAT,EAAAC,EAAAC,cAAA,QAAMC,MAAO,CAAEO,SAAU,QAAUnB,KAAKoB,MAAMC,OAC9CZ,EAAAC,EAAAC,cAAA,QAAMG,UAAU,OAAOF,MAAO,CAAEM,UAAW,UAA3C,uBAnCgBI,aCF3B,SAASC,EAAMC,EAAOC,GAE3B,IADA,IAAIC,EAAQ,IAAIC,MACPC,EAAIJ,EAAOI,EAAIH,EAAKG,IAC3BF,EAAMG,KAAKD,GAEb,OAAOF,kBCCYI,cACnB,SAAAA,EAAYV,GAAO,IAAAZ,EAAAuB,OAAAC,EAAA,EAAAD,CAAA/B,KAAA8B,GACjBtB,EAAAuB,OAAAE,EAAA,EAAAF,CAAA/B,KAAA+B,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAAnC,KAAMoB,IACN,IAAMgB,EAAQ,GACRC,EAAW,GAAAC,OAAAP,OAAAQ,EAAA,EAAAR,CAAOR,EAAM,EAAG,KAAhBQ,OAAAQ,EAAA,EAAAR,CAAwBR,EAAM,EAAG,ODF/C,SAAsBG,GAC3B,IAAK,IAAIE,EAAIF,EAAMc,OAAS,EAAGZ,EAAI,EAAGA,IAAK,CACzC,IAAMa,EAAIC,KAAKC,MAAMD,KAAKE,UAAYhB,EAAI,IADDiB,EAEjB,CAACnB,EAAMe,GAAIf,EAAME,IAAvCF,EAAME,GAFiCiB,EAAA,GAE7BnB,EAAMe,GAFuBI,EAAA,ICEzCC,CAAaT,GACb,IAAK,IAAIT,EAAI,EAAGA,EAAI,GAAIA,IACtBQ,EAAMP,KAAKpB,EAAAC,EAAAC,cAACoC,EAAD,CAAM1B,MAAO2B,OAAOC,aAAa,GAAKZ,EAAYT,OAN9C,OAQjBpB,EAAK0C,MAAQ,CACXd,SATe5B,wEAcjB,OACEC,EAAAC,EAAAC,cAAA,OAAKG,UAAU,cACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,kBAAkBd,KAAKkD,MAAMd,eAjBlBd,aCSnB6B,mLARX,OACE1C,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAACyC,EAAD,cAJU9B,aCOE+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlD,EAAAC,EAAAC,cAACiD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b2df11e2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\r\n\r\nexport default class Card extends Component {\r\n  toggle() {\r\n    this.refs.flipContainer.classList.toggle('flip-open')\r\n  }\r\n  close() {\r\n    this.refs.flipContainer.classList.remove('flip-open')\r\n  }\r\n  open() {\r\n    this.refs.flipContainer.classList.add('flip-open')\r\n  }\r\n  isOpen() {\r\n    return this.refs.flipContainer.classList.contains('flip-open')\r\n  }\r\n  render() {\r\n    return (\r\n      <div style={{ margin: '10px' }}>\r\n        <div\r\n          className='flip-container'\r\n          ref='flipContainer'\r\n          onClick={event => this.toggle()}\r\n        >\r\n          <div className='flipper'>\r\n            <div className='flip-front'>\r\n              <div className='card'>\r\n                <div className='card-back' />\r\n              </div>\r\n            </div>\r\n\r\n            <div className='flip-back'>\r\n              <div className='card'>\r\n                <div className='card-front'>\r\n                  <span className='suit' style={{ textAlign: 'left' }}>\r\n                    ♦\r\n                  </span>\r\n                  <span style={{ fontSize: '2em' }}>{this.props.value}</span>\r\n                  <span className='suit' style={{ textAlign: 'right' }}>\r\n                    ♦\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","export function range(start, end) {\r\n  var array = new Array()\r\n  for (var i = start; i < end; i++) {\r\n    array.push(i)\r\n  }\r\n  return array\r\n}\r\n\r\nexport function shuffleArray(array) {\r\n  for (let i = array.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1))\r\n    ;[array[i], array[j]] = [array[j], array[i]]\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport Card from './Card'\r\nimport { range, shuffleArray } from '../Utils'\r\nimport './GameBoard.css'\r\nimport './Cards.css'\r\n\r\nexport default class Game extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    const cards = []\r\n    const cardNumbers = [...range(0, 12), ...range(0, 12)]\r\n    shuffleArray(cardNumbers)\r\n    for (var i = 0; i < 24; i++) {\r\n      cards.push(<Card value={String.fromCharCode(65 + cardNumbers[i])} />)\r\n    }\r\n    this.state = {\r\n      cards\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='game-board'>\r\n        <div className='card-container'>{this.state.cards}</div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\nimport logo from './logo.svg'\nimport './App.css'\nimport Game from './Game'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='App'>\n        <Game />\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}