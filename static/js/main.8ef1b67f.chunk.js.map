{"version":3,"sources":["Game/cardback.png","Components/Button.js","Components/Navbar.js","Game/Card.js","Utils.js","Game/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Components_Button","props","react_default","a","createElement","className","onClick","children","Components_Navbar","k","startOver","score","win","suits","Card","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","open","enabled","_this2","Promise","resolve","reject","setState","isOpen","onOpen","onClose","_this3","isEnabled","toggle","then","onManualClose","_this4","suit","rawValue","length","style","margin","ref","event","onManualToggle","src","CardBackImage","alt","textAlign","fontSize","value","Component","range","start","end","array","i","push","shuffleArray","j","Math","floor","random","_ref","Game","cardNumbers","concat","toConsumableArray","config","cards","openCard","numDisabledCards","isGameRunning","startingScore","isGameWon","closeAllCards","_loop","card","refs","setTimeout","setOpen","setEnabled","setCardsOpen","cardNum","setScore","matchPoints","max","matchFailPoints","onCardClosed","cardClosePoints","_this5","_loop2","Card_Card","key","String","fromCharCode","onCardOpened","onCardManuallyClosed","resetGame","App","Game_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8ef1b67f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cardback.ef188c28.png\";","import React from 'react'\r\nimport './Button.css'\r\n\r\nexport default props => {\r\n  return (\r\n    <button className='btn' onClick={() => props.onClick()}>\r\n      {props.children}\r\n    </button>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport Button from '../Components/Button'\r\n\r\nimport './Navbar.css'\r\n\r\nexport default props => {\r\n  return (\r\n    <nav className='navbar'>\r\n      <Button onClick={k => props.startOver()}>Start Over</Button>\r\n      <span>\r\n        Score: {props.score}\r\n        {props.win ? ' - You Win!' : ''}\r\n      </span>\r\n    </nav>\r\n  )\r\n}\r\n","import React, { Component } from 'react'\r\nimport CardBackImage from './cardback.png'\r\n\r\nconst suits = ['♠', '♥', '♣', '♦']\r\n\r\nexport default class Card extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      open: false,\r\n      enabled: true\r\n    }\r\n  }\r\n\r\n  // #### Opening\r\n\r\n  // Opens or closes card\r\n  toggle() {\r\n    return new Promise((resolve, reject) => {\r\n      this.setState(\r\n        state => ({ open: !state.open }),\r\n        () => {\r\n          if (this.isOpen()) {\r\n            this.props.onOpen()\r\n            resolve(true)\r\n          } else {\r\n            this.props.onClose()\r\n            resolve(false)\r\n          }\r\n        }\r\n      )\r\n    })\r\n  }\r\n\r\n  // When player opens or closes card\r\n  onManualToggle() {\r\n    if (!this.isEnabled()) return // Card is disabled\r\n    // Toggle card\r\n    this.toggle().then(isOpen => {\r\n      if (!this.isOpen()) {\r\n        this.props.onManualClose()\r\n      }\r\n    })\r\n  }\r\n\r\n  // Set if card is showing front or back\r\n  setOpen(open) {\r\n    this.setState({ open })\r\n    if (open) {\r\n      this.props.onOpen()\r\n    } else {\r\n      this.props.onClose()\r\n    }\r\n    return this\r\n  }\r\n\r\n  // Is card showing front\r\n  isOpen() {\r\n    return this.state.open\r\n  }\r\n\r\n  // #### Enabling\r\n\r\n  setEnabled(enabled) {\r\n    this.setState({ enabled })\r\n    return this\r\n  }\r\n\r\n  // Is card opaque\r\n  isEnabled() {\r\n    return this.state.enabled\r\n  }\r\n\r\n  render() {\r\n    const suit = suits[this.props.rawValue % suits.length]\r\n    return (\r\n      <div style={{ margin: '10px' }}>\r\n        <div\r\n          className={\r\n            'flip-container' +\r\n            (this.state.open ? ' flip-open' : '') +\r\n            (this.state.enabled ? '' : ' disable')\r\n          }\r\n          ref='flipContainer'\r\n          onClick={event => this.onManualToggle()}\r\n        >\r\n          <div className='flipper'>\r\n            {/*\r\n             *Back\r\n             */}\r\n            <div className='flip-back'>\r\n              <div className='card'>\r\n                <div className='card-back'>\r\n                  <img src={CardBackImage} alt='Card back' />\r\n                </div>\r\n              </div>\r\n            </div>\r\n            {/* /Back */}\r\n\r\n            {/*\r\n             * Front\r\n             */}\r\n            <div className='flip-front'>\r\n              <div className='card'>\r\n                <div className='card-front'>\r\n                  {/* Suit - Upper Left */}\r\n                  <span className='suit' style={{ textAlign: 'left' }}>\r\n                    {suit}\r\n                  </span>\r\n                  {/* Card Value */}\r\n                  <span style={{ fontSize: '2em' }}>{this.props.value}</span>\r\n                  {/* Suit - Lower Right */}\r\n                  <span className='suit' style={{ textAlign: 'right' }}>\r\n                    {suit}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            {/* /Front */}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","export function range(start, end) {\r\n  var array = []\r\n  for (var i = start; i < end; i++) {\r\n    array.push(i)\r\n  }\r\n  return array\r\n}\r\n\r\nexport function shuffleArray(array) {\r\n  for (let i = array.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1))\r\n    ;[array[i], array[j]] = [array[j], array[i]]\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nimport Navbar from '../Components/Navbar'\r\nimport Card from './Card'\r\n\r\nimport { range, shuffleArray } from '../Utils'\r\nimport config from '../config.json'\r\n\r\nimport './GameBoard.css'\r\nimport './Cards.css'\r\n\r\nexport default class Game extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    // Generate card values\r\n    const cardNumbers = [\r\n      ...range(0, config.cards / 2),\r\n      ...range(0, config.cards / 2)\r\n    ]\r\n    shuffleArray(cardNumbers)\r\n\r\n    this.openCard = null\r\n    this.numDisabledCards = 0\r\n    this.isGameRunning = true\r\n\r\n    this.state = { cardNumbers, score: config.startingScore, isGameWon: false }\r\n  }\r\n\r\n  // Closes and shuffles all cards\r\n  resetGame() {\r\n    if (!this.isGameRunning) return // Game isn't running\r\n    this.setState({ score: 0 })\r\n    this.isGameRunning = false\r\n    return this.closeAllCards().then(() => {\r\n      // Create new card values\r\n      const cardNumbers = this.state.cardNumbers\r\n      shuffleArray(cardNumbers)\r\n      // Reset state values\r\n      this.setState(\r\n        {\r\n          cardNumbers,\r\n          score: config.startingScore,\r\n          isGameWon: false\r\n        },\r\n        () => {\r\n          this.isGameRunning = true\r\n          this.numDisabledCards = 0\r\n        }\r\n      )\r\n    })\r\n  }\r\n\r\n  // Flips all cards to back\r\n  closeAllCards() {\r\n    const waitOpenTime = 80\r\n    return new Promise((resolve, reject) => {\r\n      for (let i in this.refs) {\r\n        const card = this.refs[i]\r\n        // Close the card with an offset in time\r\n        // relative to its position.\r\n        // This will make a wave effect\r\n        setTimeout(() => {\r\n          // Give the closed cards a little shake\r\n          card.setOpen(true).setEnabled(true)\r\n          // Close the card\r\n          setTimeout(() => card.setOpen(false), waitOpenTime)\r\n        }, 20 * i)\r\n      }\r\n      setTimeout(() => resolve(), 20 * config.cards + waitOpenTime + 200)\r\n    })\r\n  }\r\n\r\n  // Flips all cards to front\r\n  openAllCards() {\r\n    this.setCardsOpen(range(0, config.cards))\r\n  }\r\n\r\n  // Sets the value of score in the state\r\n  setScore(value) {\r\n    if (typeof value === 'function') {\r\n      /* Functional */\r\n      this.setState(state => ({\r\n        score: value(state.score)\r\n      }))\r\n    } else {\r\n      /* Absolute */\r\n      this.setState({ score: value })\r\n    }\r\n  }\r\n\r\n  // When a card is flipped to its front\r\n  onCardOpened(cardNum) {\r\n    const card = this.refs[cardNum]\r\n\r\n    // Game is not running\r\n    if (!this.isGameRunning) return\r\n    // Card is disabled\r\n    if (!card.isEnabled()) return\r\n    // There is no other open card\r\n    if (this.openCard == null) {\r\n      this.openCard = cardNum\r\n      return\r\n    }\r\n    // Card was already open\r\n    if (this.openCard === cardNum) {\r\n      this.setCardsOpen(false, cardNum)\r\n      this.openCard = null\r\n      return\r\n    }\r\n\r\n    const openCard = this.refs[this.openCard]\r\n    const cardNumbers = this.state.cardNumbers\r\n\r\n    if (cardNumbers[cardNum] === cardNumbers[this.openCard]) {\r\n      /* Match! */\r\n      // Update Score\r\n      this.setScore(score => score + config.matchPoints)\r\n      // Fade after timeout\r\n      setTimeout(() => {\r\n        // Fade out\r\n        card.setEnabled(false)\r\n        openCard.setEnabled(false)\r\n        // Update game winnig points\r\n        this.numDisabledCards += 2\r\n        if (this.numDisabledCards >= config.cards) {\r\n          this.setState(state => ({ isGameWon: true }))\r\n        }\r\n      }, 1000)\r\n    } else {\r\n      /* No Match. */\r\n      // Update Score\r\n      this.setScore(score => Math.max(score + config.matchFailPoints, 0))\r\n      // Flip after timeout\r\n      setTimeout(() => {\r\n        card.setOpen(false)\r\n        openCard.setOpen(false)\r\n      }, 1000)\r\n    }\r\n    // There are no open cards anymore\r\n    this.openCard = null\r\n  }\r\n\r\n  // When a card is flipped to its back\r\n  onCardClosed(cardNum) {\r\n    if (cardNum === this.openCard) this.openCard = null\r\n  }\r\n\r\n  // When a player flips a card to its back\r\n  onCardManuallyClosed(cardNum) {\r\n    this.onCardClosed(cardNum)\r\n    if (this.refs[cardNum].isEnabled()) {\r\n      this.setState(state => ({\r\n        score: Math.max(state.score + config.cardClosePoints, 0)\r\n      }))\r\n    }\r\n  }\r\n\r\n  render() {\r\n    // Render Cards\r\n    const cards = []\r\n    for (let i = 0; i < config.cards; i++) {\r\n      cards.push(\r\n        <Card\r\n          key={i}\r\n          ref={i}\r\n          value={String.fromCharCode(65 + this.state.cardNumbers[i])}\r\n          rawValue={this.state.cardNumbers[i]}\r\n          onOpen={() => this.onCardOpened(i)}\r\n          onClose={() => this.onCardClosed(i)}\r\n          onManualClose={() => this.onCardManuallyClosed(i)}\r\n        />\r\n      )\r\n    }\r\n\r\n    // Render Body\r\n    return (\r\n      <div className='game-board'>\r\n        <Navbar\r\n          startOver={() => this.resetGame()}\r\n          score={this.state.score}\r\n          win={this.state.isGameWon}\r\n        />\r\n        <div className='card-container'>{cards}</div>\r\n        <div />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\nimport './App.css'\nimport Game from './Game'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='App'>\n        <Game />\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}