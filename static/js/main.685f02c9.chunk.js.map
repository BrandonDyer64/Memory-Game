{"version":3,"sources":["Game/cardback.png","Components/Button.js","Components/Navbar.js","Game/Card.js","Utils.js","Game/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Components_Button","props","react_default","a","createElement","className","onClick","children","Components_Navbar","k","startOver","score","symbols","Card","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","symbol","rawValue","length","refs","flipContainer","classList","toggle","isOpen","onOpen","onClose","remove","add","contains","_this2","style","margin","ref","event","src","CardBackImage","textAlign","fontSize","value","Component","range","start","end","array","i","push","shuffleArray","j","Math","floor","random","_ref","Game","cardNumbers","concat","toConsumableArray","config","cards","cardCloseCallbacks","window","openAllCards","closeAllCards","openCard","numDisabledCards","setTimeout","setState","_this3","_loop","close","enable","open","cardNum","_this4","console","log","isEnabled","disable","max","_this5","_loop2","Card_Card","key","String","fromCharCode","onCardOpened","onCardClosed","_this6","resetGame","getCards","App","Game_Game","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.685f02c9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cardback.ef188c28.png\";","import React from 'react'\r\nimport './Button.css'\r\n\r\nexport default props => {\r\n  return (\r\n    <button className='btn' onClick={() => props.onClick()}>\r\n      {props.children}\r\n    </button>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport Button from '../Components/Button'\r\n\r\nimport './Navbar.css'\r\n\r\nexport default props => {\r\n  return (\r\n    <nav className='navbar'>\r\n      <Button onClick={k => props.startOver()}>Start Over</Button>\r\n      <span>Score: {props.score}</span>\r\n    </nav>\r\n  )\r\n}\r\n","import React, { Component } from 'react'\r\nimport CardBackImage from './cardback.png'\r\n\r\nconst symbols = ['♠', '♥', '♣', '♦']\r\n\r\nexport default class Card extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      symbol: symbols[props.rawValue % symbols.length]\r\n    }\r\n  }\r\n\r\n  // Opening\r\n  toggle() {\r\n    this.refs.flipContainer.classList.toggle('flip-open')\r\n    if (this.isOpen()) {\r\n      this.props.onOpen()\r\n    } else {\r\n      this.props.onClose()\r\n    }\r\n  }\r\n  close() {\r\n    this.refs.flipContainer.classList.remove('flip-open')\r\n    this.props.onClose()\r\n  }\r\n  open() {\r\n    this.refs.flipContainer.classList.add('flip-open')\r\n    this.props.onOpen()\r\n  }\r\n  isOpen() {\r\n    return this.refs.flipContainer.classList.contains('flip-open')\r\n  }\r\n\r\n  // Enabling\r\n  disable() {\r\n    this.refs.flipContainer.classList.add('disable')\r\n  }\r\n  enable() {\r\n    this.refs.flipContainer.classList.remove('disable')\r\n  }\r\n  isEnabled() {\r\n    return !this.refs.flipContainer.classList.contains('disable')\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div style={{ margin: '10px' }}>\r\n        <div\r\n          className='flip-container'\r\n          ref='flipContainer'\r\n          onClick={event => this.toggle()}\r\n        >\r\n          <div className='flipper'>\r\n            {/* Back */}\r\n            <div className='flip-back'>\r\n              <div className='card'>\r\n                <div className='card-back'>\r\n                  <img src={CardBackImage} />\r\n                </div>\r\n              </div>\r\n            </div>\r\n            {/* /Back */}\r\n\r\n            {/* Front */}\r\n            <div className='flip-front'>\r\n              <div className='card'>\r\n                <div className='card-front'>\r\n                  <span className='suit' style={{ textAlign: 'left' }}>\r\n                    {symbols[this.props.rawValue % symbols.length]}\r\n                  </span>\r\n                  <span style={{ fontSize: '2em' }}>{this.props.value}</span>\r\n                  <span className='suit' style={{ textAlign: 'right' }}>\r\n                    {symbols[this.props.rawValue % symbols.length]}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            {/* /Front */}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","export function range(start, end) {\r\n  var array = []\r\n  for (var i = start; i < end; i++) {\r\n    array.push(i)\r\n  }\r\n  return array\r\n}\r\n\r\nexport function shuffleArray(array) {\r\n  for (let i = array.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1))\r\n    ;[array[i], array[j]] = [array[j], array[i]]\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nimport Navbar from '../Components/Navbar'\r\nimport Card from './Card'\r\n\r\nimport { range, shuffleArray } from '../Utils'\r\nimport config from '../config.json'\r\n\r\nimport './GameBoard.css'\r\nimport './Cards.css'\r\n\r\nexport default class Game extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    const cards = []\r\n    const cardNumbers = [\r\n      ...range(0, config.cards / 2),\r\n      ...range(0, config.cards / 2)\r\n    ]\r\n    shuffleArray(cardNumbers)\r\n    this.state = { cardNumbers, score: 10 }\r\n    this.cardCloseCallbacks = []\r\n    window.openAllCards = () => {\r\n      this.openAllCards()\r\n    }\r\n    window.closeAllCards = () => {\r\n      this.closeAllCards()\r\n    }\r\n    this.openCard = null\r\n    this.numDisabledCards = 0\r\n  }\r\n\r\n  resetGame() {\r\n    this.closeAllCards()\r\n    setTimeout(() => {\r\n      const cardNumbers = this.state.cardNumbers\r\n      shuffleArray(cardNumbers)\r\n      this.setState({ cardNumbers, score: 10 })\r\n    }, 600)\r\n  }\r\n\r\n  closeAllCards() {\r\n    for (let i in this.refs) {\r\n      setTimeout(() => {\r\n        this.refs[i].close()\r\n        this.refs[i].enable()\r\n      }, 20 * i)\r\n    }\r\n  }\r\n\r\n  openAllCards() {\r\n    for (let i in this.refs) {\r\n      this.refs[i].open()\r\n    }\r\n  }\r\n\r\n  onCardOpened(cardNum) {\r\n    console.log(cardNum, this.openCard)\r\n    if (!this.refs[cardNum].isEnabled()) return\r\n    if (this.openCard != null) {\r\n      if (this.openCard == cardNum) {\r\n        this.refs[cardNum].close()\r\n        this.openCard = null\r\n        console.log('set null (same card)')\r\n        return\r\n      }\r\n      const openCard = this.openCard\r\n      const cardNumbers = this.state.cardNumbers\r\n      if (cardNumbers[cardNum] == cardNumbers[openCard]) {\r\n        this.setState(state => ({\r\n          score: state.score + 10\r\n        }))\r\n        setTimeout(() => {\r\n          this.refs[cardNum].disable()\r\n          this.refs[openCard].disable()\r\n          this.numDisabledCards += 2\r\n\r\n          if (this.numDisabledCards >= config.cards) {\r\n            this.setState(state => ({ score: `${state.score} - Win!` }))\r\n          }\r\n        }, 1000)\r\n      } else {\r\n        this.setState(state => ({\r\n          score: Math.max(state.score - 1, 0)\r\n        }))\r\n        setTimeout(() => {\r\n          this.refs[cardNum].close()\r\n          this.refs[openCard].close()\r\n        }, 1000)\r\n      }\r\n      console.log('set null')\r\n      this.openCard = null\r\n    } else {\r\n      this.openCard = cardNum\r\n    }\r\n  }\r\n\r\n  onCardClosed(cardNum) {\r\n    if (cardNum == this.openCard) this.openCard = null\r\n    if (!this.refs[cardNum].isEnabled()) return\r\n\r\n    this.setState(state => ({ score: Math.max(state.score - 1, 0) }))\r\n  }\r\n\r\n  getCards() {\r\n    const cards = []\r\n    for (let i = 0; i < config.cards; i++) {\r\n      cards.push(\r\n        <Card\r\n          key={i}\r\n          ref={i}\r\n          value={String.fromCharCode(65 + this.state.cardNumbers[i])}\r\n          rawValue={this.state.cardNumbers[i]}\r\n          onOpen={() => this.onCardOpened(i)}\r\n          onClose={() => this.onCardClosed(i)}\r\n        />\r\n      )\r\n    }\r\n    this.cards = cards\r\n    return cards\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='game-board'>\r\n        <Navbar startOver={() => this.resetGame()} score={this.state.score} />\r\n        <div className='card-container'>{this.getCards()}</div>\r\n        <div />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\nimport './App.css'\nimport Game from './Game'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='App'>\n        <Game />\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}